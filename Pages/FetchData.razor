@page "/fetchdata"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@attribute [Authorize]

<PageTitle>All Users</PageTitle>

<h1>All Users in Organization</h1>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>DisplayName</th>
                <th>UserPrincipalName</th>
                <th>JobTitle</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users) {
                <tr>
                    <td> @user.DisplayName </td>
                    <td> @user.UserPrincipalName </td>
                    <td> @user.JobTitle </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<User>? users;
    private IEnumerable<Employee>? emps;

    protected override async Task OnInitializedAsync()
    {
        try {
            if (Cache.AllUsers.Count() == 0 && (Cache.AllEmps == null || Cache.AllEmps.Count() == 0)) {
                IGraphServiceUsersCollectionPage data = await GraphServiceClient.Users.Request(
                ).Select(
                    u => new{
                        u.DisplayName,
                        u.UserPrincipalName,
                        u.CompanyName,
                        u.JobTitle,
                        u.Department
                    }
                ).GetAsync();

                users = new List<User>();
                users = users.Concat(data);

                emps = new List<Employee>();
                foreach (User user in data) {
                    emps = emps.Append(new(user));
                }

                var next = data.NextPageRequest;

                while (next != null) {
                    data = await next.GetAsync();
                    users = users.Concat(data);
                    foreach (User user in data) {
                        emps = emps.Append(new(user));
                    }
                    next = data.NextPageRequest;
                }

                /*
                IEnumerable<User>? tmp = users.Where(user => (
                        user.CompanyName.Contains("Oneida") && !(user.DisplayName.Contains("ADM")) &&
                        user.UserPrincipalName.Contains("oneidanation.org") && user.DisplayName.Contains(" ") &&
                        !user.Department.Equals(String.Empty) && !user.JobTitle.Equals(String.Empty)
                )
                );
                */
                Cache.AllUsers = users;
                Cache.AllEmps = emps; 


            }

            users = Cache.AllUsers;
            emps = Cache.AllEmps;

        } catch (Exception ex) {
            Console.WriteLine("Error:");
            Console.WriteLine(ex.StackTrace);
            Console.WriteLine("\t" + ex.Message);
        }
    }
}
